<!doctype html>
<html lang="en">

<head>
    <title>My WebRTC</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>

    <video id="myVideoTag" autoplay></video>
    <video id="theirVideoTag" autoplay></video>

    <div>
        <label>Name</label><input id="myName" type="text" />
        <label>Message</label><input id="myMessage" type="text" />
        <input id="sendMessage" type="submit" />
        <div id="chatArea">Message Output:</br>
        </div>
        <div id="signalingArea">Signaling Messages:</br>
        </div>
    </div>

    <script>
        var myVideoArea = document.querySelector("#myVideoTag");
        var theirVideoArea = document.querySelector("#theirVideoTag");
        var myName = document.querySelector("#myName");
        var myMessage = document.querySelector("#myMessage");
        var sendMessage = document.querySelector("#sendMessage");
        var chatArea = document.querySelector("#chatArea");
        var signalingArea = document.querySelector("#signalingArea");
        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        var configuration = {
            'iceServers': [{
                'url': 'stun: stun.l.google.com:19302'
            }]
        };
        var rtcPeerConn;

        io = io.connect();

        io.emit('ready', {
            "chat_room": ROOM,
            "signal_room": SIGNAL_ROOM
        });

        io.emit('signal', {
            "type": "user_here",
            "message": "Are you ready for a call?",
            "room": SIGNAL_ROOM
        });

        io.on('signaling_message', function(data) {
            console.log("test signal");
            displaySignalMessage("Signal received :" + data.type);

            if (!rtcPeerConn)
                startSignaling();

            if (data.type != "user_here") {
                var message = JSON.parse(data.message);

                if (message.sdp) {
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function() {
                        if (rtcPeerConn.remoteDescription.type == 'offer') {
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                } else {
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }

            }

        });

        function startSignaling() {
            displaySignalMessage("starting signaling...");

            rtcPeerConn = new webkitRTCPeerConnection(configuration);

            rtcPeerConn.onicecandidate = function(evt) {
                if (evt.candidate)
                    io.emit('signal', {
                        "type": "icecandidate",
                        "message": JSON.stringify({
                            'candidate': evt.candidate
                        }),
                        "room": SIGNAL_ROOM
                    });
                displaySignalMessage("completed that ice candidate");
            };

            rtcPeerConn.onnegotiationneeded = function() {
                displaySignalMessage("on negotiation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }

            rtcPeerConn.onaddStream = function(evt) {
                displaySignalMessage("going to add their stream...");
                theirVideoArea.srcObject = stream;
            };

            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            navigator.getUserMedia({
                audio: true,
                video: true
            }, function(stream) {
                displaySignalMessage("going to display my stream...");
                myVideoArea.srcObject = stream;
                rtcPeerConn.addStream(stream);
            }, logError);

        }

        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function() {
                displaySignalMessage("sending local description");
                io.emit('signal', {
                    "type": "SDP",
                    "message": JSON.stringify({
                        'sdp': rtcPeerConn.localDescription
                    }),
                    "room": SIGNAL_ROOM
                });
            }, logError);
        }

        function logError(error) {
            displaySignalMessage(error.name + ': ' + error.message);
        }

        io.on('announce', function(data) {
            displayMessage(data.message);
        });

        io.on('message', function(data) {
            displayMessage(data.author + ": " + data.message);
        });

        sendMessage.addEventListener('click', function(ev) {
            io.emit('send', {
                "author": myName.value,
                "message": myMessage.value,
                "room": ROOM
            });
            ev.preventDefault();
        }, false);

        function displayMessage(message) {
            console.log("Correct go to next page");
            chatArea.innerHTML = chatArea.innerHTML + "</br>" + message;
        }

        function displaySignalMessage(message) {
            console.log("display message");
            signalingArea.innerHTML = signalingArea.innerHTML + "</br>" + message;
        }
    </script>
</body>

</html>